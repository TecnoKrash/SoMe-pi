
<document>
    <head>
        <title>Barycentric interpolation</title>
        <cowx>util.cowx</cowx>

        // Links in head don't work, so they are added manually in the body
    </head>
    <body>
        <!include-things/> // Links in head don't work, so they are added manually with this

        <!article-summary :_1=" " :_2=" "/>

        <main>
            <h1> Interpolation in any dimension with barycentric coordinates </h1>
            
            <h2 id="intro"> Introduction </h2>

            Interpolation is a method used to create a new point in a data set without doing new measurements, using the existing points.
            It can be used to create a continuous function from a set of points, and can have applications in various domains: it can be used to
            scale up the framerate of a video, to predict phenomenons with less measurement, etc. In this article, 
            we will try to find an efficient method that can handle a lot of parameters. 

            <br/>
            <br/>

            Here is our problem : a company wants to determine how efficient a machine is, depending on various conditions (such as temperature, material properties, etc).
            The company takes multiple measurements under different conditions and then interpolates the results to guess what would happen in cases that weren't tested.

            The goal is not to correct the measurements or to reduce noise in the data, but simply to create a plausible continuous function from the set of points. 
            More precisely, we will try to solve a more specific problem that is hard to solve with other methods:

            <ul>
                <li>
                    The measurements can be impacted by a potentially large number of independent parameters.
                </li>
                <li>
                    The measurements aren't equally distributed: they aren't on a "grid" of predefined values, and there can be more points around some values than others.
                </li>
                <li>
                    The partial derivatives of the output aren't available.
                </li>
            </ul>

            <br/>

            Let's say we have $n$ parameters. We will represent each measurement as a point in an $n$-dimensional space: the coordinates of the point will correspond to
            the value of each parameter during the measurement, and each point will be associated with its measured value. We can now try to interpolate at
            points where we don't have any measurements.

            <h2 id="visu">Visualization</h2>

            To visualize how each method produces results, we will use interactive figures like
            the one below.

            It represents the problem using two parameters. Each point you see (which you can also drag around) represents a measurement.
            Its $X$ and $Y$ coordinates represent the values of its two parameters, and its color represents the measured value.
            Each pixel in the background indicates the result of the interpolation at its position.
            For this example, we used a very simple interpolation method: the output value is the value of the nearest measurement.


            <!figure id="nearest" :caption="Nearest neighbor interpolation"></figure>

            <h2 id="inverse-distance-title">Inverse distance</h2>

            We can start by trying a very simple method: inverse distance weighting.
            If $A_0...A_n$ are the measurement points and $§a_0...§a_n$ are their values, and we want to get a result on the point $M$, 
            we calculate:

            $$
                {|§S__{i=0}^^{n} a_i / {A_iM}} / {|§S__{j=0}^^{n} 1 / {A_jM}} 
            $$

            This is a weighted average, where the weights are the inverse distances between the points.
            This way, the farther a point is from $M$, the less it will impact the result.
            
            What if a distance is zero? Then it means that $M$ is directly on a measured point, so you can simply take its value instead.

            <!figure id="inverse-distance" :caption="Inverse distance interpolation"></figure> 

            <h2 id="pb-inverse-distance">Problems with inverse distance</h2>
            Although this method initially seems to work well, it has some drawbacks.

            <br/>
            <br/>

            First, if there are many points in the same location (for instance, if you want more precision around a particular point),
            their values will disproportionately impact the result.
            
            <!figure :caption="Bad interpolation example">
                <div id="inverse-distance-fail-1" class="half-figure">
                    <div class="figure">
                        <inner></inner>
                    </div>
                </div>
                <div id="inverse-distance-fail-2" class="half-figure">
                    <div class="figure">
                        <inner></inner>
                    </div>
                </div>
            </figure>

            On the right, four additional measurements have been made around the red point, and they impact the results across the entire space!
            (The color of the borders is not the same.) The impact should instead be limited to the area around the red point.

            <br/>
            <br/>

            This method also has another drawback: it takes all the points into account, even when it shouldn't.
            In the next figure, you would expect the center of the screen to be completely blue, but the red point has impacted the result, and the center is now purplish.

            <!figure id="inverse-distance-fail-3" :caption="Another bad interpolation example"></figure> 

            <h2 id="simpler-problem">A simpler problem</h2>

            Before trying another method, we will reduce the number of points.
            We will first interpolate within the simplest shape possible: a triangle.
            If we are in a 3-dimensional space (with 3 parameters), it will be a tetrahedron, and in higher dimensions, the equivalent object.

            Generally speaking, in any dimension, this object is called a <em>simplex</em>.

            <br/>
            <br/>

            We will consider a non-degenerate simplex 
            (not completely flat, meaning the points are not all contained within the same plane, so we can't find any $n−1$ dimensional subspace where they all fit)
            in dimension $n$ defined by the point) $A_0 .. A_n$, and try to interpolate inside it.

            <br/>
            <br/>

            Fortunately, there is a nice tool for that: <em>barycentric coordinates</em>.

            <!def :title="Barycentric coordinates">
                Given a point $M$, $(§l_0 ... §l_n)$ are the barycentric coordinates of $M$ for $A_0...A_n$ if:
                
                $$
                    |§S__{k=0}^^{n} §l_k ?v{A_k M} = 0 ?txt{and} |§S__{k=0}^^{n} §l_k = 1
                $$
            </def>

            But what does it means? The first condition implies that if you consider $§l_0 ... §l_n$ as weights on the points $A_0 ... A_n$,
            $M$ is the barycenter of these points.
            The second condition is included just for convenience.

            <!hidden id="bary-reformulate" :id="bary-reformulate" :title="Reformulation">
                If we consider another point $O$ as an origin then we have:
                $$
                    ?v{OM} = |§S__{k=0}^^{n} §l_k ?v{OA_k}
                $$

                $M$ is the weighted average of the points, and the weights are its barycentric coordinates.
            </hidden>

            For the mathematical proofs up ahead, we will provide simple explanations with interactive visualizations, as well as more formal proofs.

            <!hidden id="formal-framework" :id="formal-framework" :title="Formal framework">

                For the formal proofs, we will represent our points in an Euclidean space, meaning an affine space $E$, 
                with the associated real vectorial space $?v E$ of dimension $n$, containing 
                an inner product $x . y = |§S__{k = 1}^^n x_k ?x y_k$ where $(x_1 ... x_n)$ and $(y_1 .. y_n)$ are the coordinates of the corresponding points.

            </hidden>


            <h2 id="barycentric-co-title">Why barycentric coordinates?</h2>

            We can first make a few remarks:
            <ul>
                <li>
                    If $M$ is on $A_k$, then its coordinate for $k$ is $1$, the others are $0$.
                    For interpolation, if we use its coordinates as weights for the measurements, we will obtain the value of $A_k$,
                    which is what we are looking for. 
                </li>
                <li>
                    If $M$ is the center of gravity of the simplex (the average of all the points), its barycentric coordinates
                    will all be equal to $1 / {n + 1}$ where $n$ is the dimension. This is also consistent.
                </li>
            </ul>

            These properties make them good candidates for interpolation. We can also prove that for all points in a simplex (that is not degenerate),
            these coordinates exist and are unique. We will also see later that they are easy to compute.

            <br/>
            <br/>

            But first, let's introduce a basis for the space.

            <br/>

            To define a point in space, we often use an orthonormal basis, which consists of a point $O$ as the origin of the space, and $n$ unit vectors 
            (where $n$ is the dimension of the space) that are all orthogonal to each other.
            However, the basis does not need to be orthogonal to uniquely define each point in the space.
            The vectors can be of any length and point in any direction, as long as they do not all lie in the same plane.

            <br/>
            <br/>

            With that in mind, we can now construct a convenient basis to define our points.
            First, we will take a random point of the simplex, which we will name $A_0$.
            It will serve as the origin. We will then name all the other points $A_1$ to $A_n$.

            <br/>
            <br/>

            The vectors ($?v{A_OA_1},...,?v{A_OA_n}$) will define the basis.
            Because the simplex is not degenerated, we know that this basis is valid and that the vectors do not all lie in the same plane. 
            From now on, we will refer to this basis as the "simplex basis." 

/*
            <!hidden id="base-proof1" :id="base-proof1" :title="Explanation">

                Let's do a proof by contradiction. We suppose that we have a valid simplex in an $n$-dimensional space,
                and that the vectors and that the vectors $?v{A_OA_1},...,?v{A_OA_n}$ are contained in a $n-1$-dimensional plaine $£P$. 
                (To fully describe this plane, we will use the point $A_0$ as a reference.) 

                <br/>
                <br/>

                Since $A_0$ is the origin of $£P$, $A_0$ is contained within $£P$.
                Therefore, for all $k € [0 , n]$, $A_0$ and $?v{A_0A_k}$ are contained in $£P$, which means $A_k$ is contained in $£P$.

                <br/>
                <br/>

                This mean that all the vertices of the simplex are contained within $£P$. The simplex is thus degenerate (completely flat); 
                this is a contradiction, so our hypothesis is false and the vectors $?v{A_OA_1},...,?v{A_OA_n}$ are not contained in a $n-1$ dimensional plane.
            </hidden>
 
            <!hidden id="base-proof2" :id="base-proof2" :title="Precision to be rigorous">
                The proof above is correct but we need to do a little precision:
                <br/>
                - <em>the vectors $?v{A_OA_1},...,?v{A_OA_n}$ are contained in a $n-1$ dimensional plane $£P$.</em>

                <br/>
                    To be more exact, the vectors form an hyperplane $H$ of dimension $n-1$ in $?v E$, witch is associated
                    to the corresponding plane $£P$ in $E$, witch will pass through the center of the space. 
                    We have set the center to $A_0$, so everything following that is correct.
            </hidden>
*/

            We will now use the simplex basis to build the barycentric coordinates of a point $M$ located in the simplex for each vertex.

            First, we know that there exist coefficients $(x_k)_{k € [1, n]}$ so that:   
            
            $$
                ?v{A_0M} = |§S__{k = 1}^^n x_k ?v{A_0A_k}
            $$

            (Those coefficients are the coordinates of $M$ in the simplex basis.)

            Here all the vectors are relative to $A_0$, but we want them to be relative to $M$ (to match the definition of barycentric coordinates).
            Thus we can add $?v{MA_0}$ on both side of the equation:
            (using the fact that $?v{MA_0} =  |§S__{k = 1}^^n x_k ?v{MA_0}  + (1 - |§S__{k = 1}^^n x_k) ?v{MA_0}$):

            $$
                ?v{MA_0} + ?v{A_0M} &= ?v{MA_0} + §S__{k = 1}^^n x_k ?v{A_0A_k} &&
                ?v 0                &= ?v{MA_0} (1 - |§S__{k = 1}^^n x_k + |§S__{k = 1}^^n x_k) + §S__{k = 1}^^n x_k ?v{A_0A_k} &&
                ?v 0                &= ?v{MA_0} (1 - |§S__{k = 1}^^n x_k) + §S__{k = 1}^^n x_k (?v{MA_0} + ?v{A_0A_k}) &&
                ?v 0                &= ?v{MA_0} (1 - |§S__{k = 1}^^n x_k) + §S__{k = 1}^^n x_k (?v{MA_k})
            $$

            We can see that this resembles the definition of barycentric coordinates. We just need to set, for all $k € [0 ; n]$ 
            $$
                y_k = <!system style="vertical-align: middle;">
                    \ 1 - |§S__{k=1}^^n x_k & ?txt{if} k = 0 &&
                    \ x_k & ?txt{otherwise}
                </system>
            $$

            This gives us what we want :
            $$
                |§S__{k = 1}^^n y_k ?v{MA_k}  = ?v 0

            $$

            The second condition is also verified : $|§S__{k=0}^^n y_k = 1$

            <br/>

            We have proven the existence of barycentric coordinates in a simplex!
            We have also shown that for all vertices $A_k$ (except the origin), the coordinate for that vertex is equal to the coefficient $x_k$.
            This property will be useful later.

            <br/>
            <br/>

            To prove that these coordinates are unique, here is a boring proof:

            <!hidden id="existence-proof2" :id="existence-proof2" :title="Uniqueness proof">                
                Let $M € E$, we suppose that $(a_k)_{k € [0, n]}$ et $(b_k)_{k € [0, n]}$ are barycentric coordinates for $M$ in $(A_k)_{k € [0, n]}$.
                Then we have:
                $$
                    |§S__{k=0}^^n §a_k ?v{MA_k} = |§S__{k=0}^^n §b_k ?v{MA_k}
                $$

                This implies:
                $$
                    |§S__{k=0}^^n ?v{MA_k} (§a_k - §b_k) &= 0 &&
                    |§S__{k=0}^^n ?v{A_0M} (§a_k - §b_k) + |§S__{k=0}^^n ?v{MA_k} (§a_k - §b_k) &= 0 &&
                    |§S__{k=0}^^n ?v{A_0A_k} (§a_k - §b_k) &= 0
                $$

                But $(?v{A_0A_1} ... ?v{A_0A_n})$ form a basis of $?v E$, so for all $k € [0 ; n]$, $§a_k - §b_k = 0$ which means $a_k = b_k$

            </hidden> 

            <h2 id="barycentric-co-in-simplex">Barycentric coordinates in a simplex </h2>

            We will now try to find a simple (and easy to compute) expression for barycentric coordinates. 

            As we saw before, the barycentric coordinate of a vertex $A_k$ is equal to the coefficient $x_k$ of the vector to this vertex $?v{A_0A_k}$ 
            in the simplex basis. Thus, we just have to find an expression for that coefficient. If we take all the other vertices
            of the simplex, we know that they define a plane $£P_k$, and that $A_k$ is the only point out of it. 
            This means that $?v{A_0A_k}$ is the only vector not perpendicular to $?v n$, the unit normal vector of $£P_k$ pointing towards $A_k$.
            We have: 
            $$
                ?v{A_0M}.?v n = (|§S__{i=1}^^{n} x_i ?v{A_0A_i}).?v n = (x_k ?x ?v{A_0A_k}). ?v n = x_k (?v{A_0A_k}. ?v n)
            $$

            $?v{A_0A_k}.?v n$ is just the height of the simplex and $?v{A_0M}.?v n$ is just the height of M.

            Thus we have: 

            $$
                x_k = {|{Height\ of\ }?txt{M}}/{|{Height\ of\ }A_k}
            $$

            Just below is a visualization of the situation for a 2-simplex (a triangle). The blue lines are the vector representing 
            $M$ in the simplex basis, and the green line represents the heights of $M$, the yellow line the height of $A_k$.

            <!figure id="barycentric-height" :caption="Coefficient visualisation">
                <div class="figure-math">
                    $
                        x_k = {|{Height\ of\ }M}/{|{Height\ of\ }\ A_k}
                            = {<%span id="bh-frac-top" style="color: #00ff00">999</span>} / {<%span id="bh-frac-btm" style="color: #ffff00">999</span>}
                            = <%span id="bh-res">999</span>
                    $
                </div>
            </figure>


            <!hidden id="expression-proof2" :id="expression-proof2" :title="Same proof, but more rigorous">
                
                Let set for all $k € [1, n]$, $b_k = (?v{A_0A_k})$.  $(b_1 ... b_n) \\ {b_k}$ defines a hyperplane $£B_k$ of $?v E$. 
                We will name $P_k$ the associated plane in $E$.

                <br/>

                Let $H$ be the orthogonal projection of $M$ on $£B_k$
                and $K$ the orthogonal projection of $A_k$ on $£B_k$.

                <br/>
                <br/>

                Let $k € [1, n]$.
                We have : 
                $$
                    ?v{A_0M} = |§S__{i = 1}^^n x_i ?v{A_0A_i} &&
                    ?v{A_0M} = |§S__{i € [1, n] \\ {k}}^^n x_i ?v{A_0A_i} + x_k ?v{A_0A_k}
                $$
                Where $(x_i)_{i € [0 ; n]}$ are the barycentric coordinates of $M$ in $(A_0 ... A_n)$

                Let $?v n$ the normal vector of $£B_k$ pointing towards $A_k$.

                We have:
                $$
                    x_k ?v{A_0A_k} . ?v n &= ?norm{?v{HM}} &&
                    x_k ?v{A_0A_k} . ?v{n} &= ?norm{?v{HM}} &&
                    x_k ?v{KA_k} . ?v{n} + ?v{A_0K} . ?v{n} &= ?norm{?v{HM}}
                $$

                Since $K$ and $A_0$ are both in $P_k$, and $?v{KA_k}$ and $?v{HM}$ are both normal to $£B_k$.
                $$
                    x_k ?x ?norm{?v{KA_k}} &= ?norm{?v{HM}}&&
                $$

                This gives us the expression of $x_k$ :
                $$
                    x_k = { ?norm{?v{HM}} } / { ?norm{?v{KA_k}} }
                $$

                Now by following the proof of the existence of the coordinates, we have $§l_k = x_k$.
            </hidden>

            <h2 id="area-and-volume">Area and volume</h2>

            To better visualize how barycentric coordinates behave, we can use another formula.

            In 2 dimensions, the area of a triangle is given ${|{basis} ?x |{height}} / 2$. We can reformulate the expression:
            Let $l != m != k$

            $$
                x_k &= {|{Height\ of\ }?txt{M}}/{|{Height\ of\ }A_k} &&
                    &= { £A(A_l A_m M)} / {£A(A_l A_m A_k)}
            $$

            This is the ratio of the triangle's area where $A_k$ have been replaced by $M$, by the area of the original triangle.

            Here is an example:
    
            <!figure id="barycentric-area" :caption="Barycentric coordinates with area">
                <div class="figure-math">
                    $
                        {|{blue\ area}} / {|{gray\ area}}
                        = {<%span id="ba-frac-top" style="color: #0000ff">999</span>} / {<%span id="ba-frac-btm" style="color: #777">999</span>}
                        = <%span id="ba-res">999</span>
                    $
                </div>
            </figure>

            The same concept applies in three dimensions: the coordinates are the ratio of the volumes.

            <!figure id="barycentric-volume" :caption="Barycentric coordinates with volume">
                <div class="figure-math">
                    $
                        {|{blue\ volume}} / {|{total\ volume}}
                        = {<%span id="bv-frac-top" style="color: #0000ff">999</span>} / {<%span id="bv-frac-btm" style="color: #777">999</span>}
                        = <%span id="bv-res">999</span>
                    $
                </div>
            </figure>

            It makes sense because the sum of the small areas/volumes will be the total simplex area/volume, so the sum
            of the coordinates will be $1$. 
            
            <br/>
            <br/>
            
            However, this formula is only useful for visualization, since heights are easier to compute.
            The program used to compute barycentric coordinates in the next interactive figures will only use the heights. 
            
            <br/>
            <br/>
            

            You can see that this method works well for interpolation:

            <!figure id="single-simplex" :caption="Barycentric interpolation in one simplex"></figure> 

            Since we have maintained a general approach throughout, this method works in any dimension!

            <h2 id="cloud-of-points"> Interpolation in a cloud of points </h2>

            Even tho barycentric interpolation works very well, the case presented above isn't very practical : we only have n points, and the area 
            where we can interpolate is very small. Ideally, we would like to interpolate within any cloud of points over a larger area.
            <br/>
            <br/>

            We can try to triangulate the space with those points (by choosing simplexes that cover the entier space), but there are some drawbacks:
            <ul>
                <li>
                    First, there is no unique way to achieve this (see figures below).
                </li>
                <li>
                    Triangulation algorithms are already complex in two dimensions; extending them to higher dimensions is likely to be very challenging.
                </li>
                <li>
                    If interpolation is needed at a single point, there is no need to compute a triangulation for the entire
                    space—it would be more efficient to consider only the simplexes surrounding the point.
                </li>
            </ul>

            <!figure :caption="Two different interpolations">
                <div id="triangulation-1" class="half-figure">
                    <div class="figure">
                        <inner></inner>
                    </div>
                </div>
                <div id="triangulation-2" class="half-figure">
                    <div class="figure">
                        <inner></inner>
                    </div>
                </div>
            </figure>

            Additionally, bad triangulations can lead to terrible interpolation results.
            
            <!figure id="triangulation-bad" :caption="A terrible triangulation"></figure> 

            <br/>
            <br/>

            Another approach is to select the $n$ nearest points to form a simplex.
            However, there are cases where the formed simplex does not contain the point of interest.

            <!figure id="outside-triangle" :caption="The white point is not in the triangle formed by the 3 nearest points"></figure> 

            <h2 id="last-method">The final method</h2>

            To get better results, we can try interpolating in multiple simplexes.
            We can select an arbitrary number of simplexes that contains the point, and calculate the average of their interpolations.
            To choose the best simplexes, several criterias can be considered:
            <ul>
                <li>The smallest volumes</li>
                <li>The smallest surfaces</li>
                <li>The smallest ${|{surface}}/{|{volume}}$ ratio (to avoid stretched simplexes).</li>
            </ul>

            The choice of criteria and the number of simplexes to consider should be adapted to the nature of the interpolation problem:
            some datasets can be more adapted to a specific method.

            <br/>
            <br/>

            Here is an example with the volume criterion, with 2 simplexes used to interpolate:

            <!figure id="final-interpolation" :caption="Average of interpolations of the 2 smallest simplexes">
            </figure>

            As you can see, the algorithm creates discontinuities around points that are near the border of a triangle.
            Also, the algorithm seems to try interpolating in stretched triangles, resulting in the blue stripes and purple stripes around the center.
            
            <br/>
            <br/>

            To address this issue, we can use a weighted average. Let $S$ be the set of all simplexes that contains the point to interpolate. 
            Define $w$ a function that takes a simplex and returns a criterion as described above,
            and $i$ a function that returns the interpolated value in the simplex. We can then compute:

            $$
                { |§S__{S € A} { i(s) } / { w(s) ^ n } } / { |§S__{S € A} { 1 } / { w(s) ^ n } }
            $$ 

            Here, $w$ returns the surface of the simplex, and $n = 2$:

            <!figure id="weighted-interpolation" :caption="Interpolation with average of multiple simplexes">
            </figure>

            The result may not be perfect, but if discontinuities are a significant issue,
            it is possible to smooth the results further by calculating the interpolation at multiple points around the desired value.

            <h2 id="conclusion"> Conclusion </h2>

                Even though we focused primarily on 2D examples (particularly to demonstrate the value of interpolation points with colors),
                one of the greatest advantages of this method is its ability to be generalized to any dimension.

                <br/>

                We choose a very specific problem at the beginning, but the way we used barycentric coordinates in simplexes around the point we interpolate
                 makes this method very flexible compared to the other methods we introduced earlier. 
                 It allows you to decide how to aggregate interpolation values from different simplexes to obtain the final result, as demonstrated in the last section.

                <br/>
                <br/>

                There are still some drawbacks to this method.
                It is computationally more intensive than the simpler methods we discussed earlier (although it remains reasonable)
                and can only interpolate within the convex hull of the points 
                (i.e., the interior of the shape formed by connecting all the outer points of the cloud).


            <h2 id="source"> Links and source code </h2>

            If you are really interested, here is  an implementation of this method, as well as the source code of the website:
            <br/>
            <a href="https://github.com/TecnoKrash/SoMe-pi">Github repository</a>
            
            <br/>
            <br/>

            Here is a video explaining how to find the volume of a simplex in any dimension, which we used in the last section:
            <br/>
            <a href="https://www.youtube.com/watch?v=o9hXjCpVB10">Finding the volume of a simplex (YouTube)</a>

            <br/>
            <br/>

            This article presents a method for obtaining barycentric coordinates in shapes more complex than simplexes,
            which could be a great solution for improved results:
            a great solution to get better results:
            <br/>
            <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3549276/">Error Estimates for Generalized Barycentric Interpolation</a>

            <br/>
            <br/>

            Made by TecnoKrash \& Sergueille Bismuth

        </main>
    </body>
</document>


